{"version":3,"sources":["components/header.js","components/india.js","components/Contact.js","components/all_States.js","App.js","serviceWorker.js","index.js"],"names":["Heads","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","Component","India","props","name","Card","style","width","Body","Title","color","Subtitle","Text","Contact","Header","Button","Footer","All_states","state","stateData","axios","get","then","res","persons","data","setState","key","this","sts","Object","keys","Accordion","defaultActiveKey","map","val","ky","v","districtData","dstkey","as","eventKey","Badge","itm","ind","e","active","recovered","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.246dfa3c.chunk.js","sourcesContent":["\r\nimport React,{Component} from 'react';\r\n\r\n//import { Button } from 'react-bootstrap';\r\nimport { Nav,Navbar } from 'react-bootstrap';\r\nclass Heads extends Component{\r\n\r\nrender()\r\n{\r\n    return(\r\n\r\n <div>\r\n       <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n           <Navbar.Brand href=\"#home\">COVID-19</Navbar.Brand>\r\n             <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n               <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                     <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#features\">INDIA</Nav.Link>\r\n                        <Nav.Link href=\"#pricing\">KERALA</Nav.Link>\r\n      \r\n                    </Nav>\r\n                    \r\n               </Navbar.Collapse>\r\n         </Navbar>\r\n       \r\n</div>\r\n\r\n\r\n\r\n    )\r\n\r\n\r\n    \r\n\r\n    \r\n   \r\n\r\n\r\n}\r\n\r\n\r\n\r\n}\r\n\r\nexport default Heads;","import React from 'react';\r\nimport { Card } from 'react-bootstrap';\r\nimport Image from 'react-bootstrap/Image'\r\nfunction India(props){\r\nvar name=props.name;\r\n    \r\n\r\n\r\n           return(\r\n<div className=\"container-fluid pt-5\">\r\n\r\n<div className=\"row\">\r\n<div className=\"col-md-3 p-5\">\r\n<Card className=\"bg-warning\" style={{ width: '18rem' }}>\r\n  <Card.Body>\r\n    <Card.Title style={{ color: '#ffffff' }}>TOTAL</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\"></Card.Subtitle>\r\n    <Card.Text>\r\n      \r\n    </Card.Text>\r\n    \r\n    <h1 className=\"text-white\">{name}</h1>\r\n  </Card.Body>\r\n</Card>\r\n</div>\r\n\r\n<div className=\"col-md-3 p-5\">\r\n<Card className=\"bg-primary\" style={{ width: '18rem' }}>\r\n  <Card.Body>\r\n    <Card.Title style={{ color: '#ffffff' }}>ACTIVE</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\"></Card.Subtitle>\r\n    <Card.Text>\r\n      \r\n    </Card.Text>\r\n    \r\n    <h1 className=\"text-white\">100</h1>\r\n  </Card.Body>\r\n</Card>\r\n</div>\r\n\r\n<div className=\"col-md-3 p-5\">\r\n<Card className=\"bg-success\" style={{ width: '18rem' }}>\r\n  <Card.Body>\r\n    <Card.Title style={{ color: '#ffffff' }}>RECOVERED</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\"></Card.Subtitle>\r\n    <Card.Text>\r\n      \r\n    </Card.Text>\r\n    \r\n    <h1 className=\"text-white\">{name+1}</h1>\r\n  </Card.Body>\r\n</Card>\r\n</div>\r\n\r\n<div className=\"col-md-3 p-5\">\r\n<Card className=\"bg-danger\" style={{ width: '18rem' }}>\r\n  <Card.Body>\r\n    <Card.Title style={{ color: '#ffffff' }}>DEATH</Card.Title>\r\n    <Card.Subtitle className=\"mb-2 text-muted\"></Card.Subtitle>\r\n    <Card.Text>\r\n      \r\n    </Card.Text>\r\n    \r\n    <h1 className=\"text-white\">100</h1>\r\n  </Card.Body>\r\n</Card>\r\n</div>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n           )\r\n\r\n     \r\n\r\n\r\n}\r\n\r\nexport default India;","import React from \"react\";\r\nimport {Card,Button} from \"react-bootstrap\";\r\n\r\n\r\nfunction Contact(){\r\n\r\n    return(\r\n\r\n<Card className=\"text-center \">\r\n  <Card.Header className=\"bg-primary\"><h4 className=\"text-white\">Get in touch with me</h4></Card.Header>\r\n  <Card.Body>\r\n    <Card.Title></Card.Title>\r\n    <Card.Text>\r\n     Designed and developed by visakh ts\r\n    </Card.Text>\r\n    <Button variant=\"primary\">visakhsanthosh69gmail.com</Button>\r\n  </Card.Body>\r\n  <Card.Footer className=\"text-muted\">copyright@visakh ts</Card.Footer>\r\n</Card>\r\n\r\n    )\r\n}\r\nexport default Contact;","import React ,{Component}from 'react';\r\nimport { Card,Accordion ,Button,Badge} from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\n\r\nclass All_states  extends Component{\r\n\r\n  constructor(){\r\n\r\n    super();\r\n    this.state={\r\n      stateData:{}\r\n    }\r\n  }\r\n   state={\r\n\r\n    name:{}\r\n   }\r\n    componentDidMount(){\r\n    \r\n        axios.get(\"https://api.covid19india.org/state_district_wise.json\").then(res =>{\r\n         var persons = res.data;\r\n         this.setState({stateData:persons});\r\n         \r\n         \r\n         \r\n      })\r\n      }\r\n\r\n    \r\n    render(){\r\n    \r\n           \r\n             var key=this.state.stateData;\r\n             var sts=Object.keys(key);\r\n             \r\n\r\n\r\n               return(  \r\n               \r\n                \r\n                    \r\n               <div className=\"pt-5\">\r\n                 <h1 className=\"p-5\">STATEWISE DATA IN INDIA</h1>\r\n            \r\n               \r\n    <Accordion className=\"p-5\" defaultActiveKey=\"0\">\r\n\r\n  \r\n\r\n    {\r\n        \r\n        sts.map((val,ky)=>{\r\n         var v=this.state.stateData[val].districtData;\r\n         var dstkey=Object.keys(v);\r\n        \r\n         \r\n\r\nreturn(\r\n          \r\n\r\n  \r\n  <Card>\r\n    <Card.Header>\r\n      <Accordion.Toggle as={Button} variant=\"link\" eventKey={ky}>\r\n      <h5>\r\n      <Badge variant=\"info\">{val}</Badge>\r\n      </h5>\r\n      </Accordion.Toggle>\r\n    </Card.Header>\r\n    <Accordion.Collapse eventKey={ky}>\r\n      <Card.Body>\r\n        <table className=\"table table-bordered table-active table-responsive \">\r\n            <thead>\r\n                    <tr>\r\n                      <td>Districts</td>\r\n                      <td>Confirmed</td>\r\n                      <td>Active</td>\r\n                      <td>Recovered</td>\r\n                      <td>Deaths</td>\r\n                    </tr>\r\n\r\n            </thead>\r\n            <tbody>\r\n              {\r\n\r\n                   dstkey.map((itm,ind)=>{\r\n                      \r\n                      var e=dstkey[ind].active;\r\n                     \r\n                    return(\r\n                  <tr>\r\n                     <td>{itm}</td>\r\n                    <td>{e}</td>\r\n                     <td></td>\r\n                     <td>{itm.recovered}</td>\r\n                     <td>{itm.recovered}</td>\r\n\r\n\r\n\r\n\r\n                  </tr>\r\n                    )\r\n      })\r\n\r\n              }\r\n\r\n            </tbody>\r\n\r\n\r\n\r\n\r\n        </table>\r\n\r\n\r\n\r\n\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n\r\n        )\r\n        \r\n\r\n\r\n\r\n\r\n\r\n        })\r\n\r\n\r\n\r\n    }\r\n     \r\n  \r\n</Accordion>\r\n             \r\n         </div>         \r\n                 \r\n               )\r\n    }     \r\n                \r\n               \r\n                 \r\n\r\n}\r\nexport default All_states;","import React,{Component} from 'react';\n\nimport './App.css';\nimport Heads from './components/header';\nimport India from './components/india';\nimport Contact from './components/Contact';\nimport All_states from './components/all_States';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\n\n//import form from './Form';\nvar k=\" \";\nclass App extends Component {   //ALL THIS CONTENTS WILL FIRST GO TO INDEX.JS FROM THERE IT WILL BE FORWORDED INTO INDEX.HTML\n  \n  \n\n  \n  render(){\n\n    return(\n    <div>\n        \n\n        <Heads/>\n        \n        <India name={5}/>\n        <All_states />\n       \n        <Contact/>\n  \n\n    </div>\n      \n      \n    )\n\n    }\n\n  }\n  \n \n\n\n\nexport default App;//here the variable k is user defined  thats all\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';   //IMPORTING CONTENTS INSID APP.JS\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n//RENDERING COMPONENTS FROM APP.JS AND FORWORD IT INTO INDEX.HTML\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n//service worker is used to convert  app into pwa \n"],"sourceRoot":""}